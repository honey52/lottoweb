[{"C:\\prj52\\ReactProject\\prj52\\src\\components\\App.js":"1","C:\\prj52\\ReactProject\\prj52\\src\\index.js":"2","C:\\prj52\\ReactProject\\prj52\\src\\components\\Appshell.js":"3","C:\\prj52\\ReactProject\\prj52\\src\\components\\Words.js":"4","C:\\prj52\\ReactProject\\prj52\\src\\components\\Texts.js":"5","C:\\prj52\\ReactProject\\prj52\\src\\components\\Home.js":"6","C:\\prj52\\ReactProject\\prj52\\src\\components\\Detail.js":"7","C:\\prj52\\ReactProject\\prj52\\src\\components\\Lottos.js":"8","C:\\prj52\\ReactProject\\prj52\\src\\utills\\Common.js":"9","C:\\prj52\\ReactProject\\prj52\\src\\components\\Ball.js":"10","C:\\prj52\\ReactProject\\prj52\\src\\components\\CustomCard.js":"11"},{"size":975,"mtime":1608172688934,"results":"12","hashOfConfig":"13"},{"size":432,"mtime":1608171088203,"results":"14","hashOfConfig":"13"},{"size":3903,"mtime":1608259969877,"results":"15","hashOfConfig":"13"},{"size":5770,"mtime":1608166075573,"results":"16","hashOfConfig":"13"},{"size":7379,"mtime":1608172959540,"results":"17","hashOfConfig":"13"},{"size":313,"mtime":1608273302773,"results":"18","hashOfConfig":"13"},{"size":490,"mtime":1608170152609,"results":"19","hashOfConfig":"13"},{"size":6654,"mtime":1608272395499,"results":"20","hashOfConfig":"13"},{"size":163,"mtime":1608266775296,"results":"21","hashOfConfig":"13"},{"size":543,"mtime":1608172800695,"results":"22","hashOfConfig":"13"},{"size":8827,"mtime":1608280626974,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"15pugdu",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\prj52\\ReactProject\\prj52\\src\\components\\App.js",["53"],"C:\\prj52\\ReactProject\\prj52\\src\\index.js",[],["54","55"],"C:\\prj52\\ReactProject\\prj52\\src\\components\\Appshell.js",[],"C:\\prj52\\ReactProject\\prj52\\src\\components\\Words.js",["56","57","58"],"import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport '../index.css';\r\n\r\nconst styles = theme => ({\r\n    fab: {\r\n        position:'fixed',\r\n        bottom:'20px',\r\n        right:'20px'\r\n    },\r\n})\r\n\r\n\r\nconst databaseURL = \"https://webapp-a7074-default-rtdb.firebaseio.com/\";\r\n\r\nclass Words extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            words: {},\r\n            dialog: false,\r\n            word: '',\r\n            weight: ''\r\n        };\r\n    }\r\n\r\n    _get() {\r\n        fetch(`${databaseURL}/words.json`).then(res => {\r\n            if(res.status != 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(words => this.setState({words:words}));\r\n    }\r\n\r\n    _post(word) {\r\n        return fetch(`${databaseURL}/words.json`,{\r\n            method:'POST',\r\n            body:JSON.stringify(word)\r\n        }).then(res => {\r\n            if(res.status != 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(data => {\r\n            let nextState = this.state.words;\r\n            nextState[data.name] = word;\r\n            this.setState({words:nextState});\r\n        });\r\n    }\r\n\r\n    _delete(id) {\r\n        return fetch(`${databaseURL}/words/${id}.json`, {\r\n            method: 'DELETE'\r\n        }).then(res => {\r\n            if(res.status != 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(() => {\r\n            let nextState = this.state.words;\r\n            delete nextState[id];\r\n            this.setState({words:nextState});\r\n        });\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return nextState.words !== this.state.words\r\n    // }\r\n\r\n    componentDidMount() {\r\n        this._get();\r\n    }\r\n\r\n    handleDialogToggle = () => this.setState({\r\n        dialog: !this.state.dialog\r\n    })\r\n\r\n    handleValueChange = (e) => {\r\n        let nextState = {};\r\n        nextState[e.target.name] = e.target.value;\r\n        this.setState(nextState);\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        const word = {\r\n            word: this.state.word,\r\n            weight: this.state.weight\r\n        }\r\n        this.handleDialogToggle();\r\n        if(!word.word && !word.weight){\r\n            return;\r\n        }\r\n        this._post(word);\r\n    }\r\n\r\n    handleDelete = (id) => {\r\n        this._delete(id);\r\n    }\r\n\r\n    render(){\r\n        const{classes} = this.props;\r\n        return(\r\n            <div>\r\n                {Object.keys(this.state.words).map(id =>{\r\n                    const word = this.state.words[id];\r\n                    return (\r\n                        <div key={id}>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <Grid container>\r\n                                        <Grid item xs={4}>\r\n                                            <Typography variant=\"h5\" component=\"h3\">\r\n                                            가중치: {word.weight}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <Typography variant=\"h5\" component=\"h3\">\r\n                                                단어: {word.word}\r\n                                            </Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={4}>\r\n                                            <Button variant=\"contained\" color=\"primary\" onClick={()=> this.handleDelete(id)}>삭제</Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </Card>\r\n                            <br/>\r\n                        </div>\r\n                    );\r\n                })}\r\n                <Fab color=\"primary\" className={classes.fab} onClick={this.handleDialogToggle}>\r\n                    <AddIcon/>\r\n                </Fab>\r\n                <Dialog open={this.state.dialog} onClose={this.handleDialogToggle}>\r\n                    <DialogTitle>단어 추가</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField label=\"단어\" type=\"text\" name=\"word\" value={this.state.word} onChange={this.handleValueChange}/><br/>\r\n                        <TextField label=\"가중치\" type=\"number\" name=\"weight\" value={this.state.weight} onChange={this.handleValueChange}/><br/>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleSubmit}>추가</Button>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.handleDialogToggle}>닫기</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Words);",["59","60"],"C:\\prj52\\ReactProject\\prj52\\src\\components\\Texts.js",[],["61","62"],"C:\\prj52\\ReactProject\\prj52\\src\\components\\Home.js",[],"C:\\prj52\\ReactProject\\prj52\\src\\components\\Detail.js",["63"],"import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport '../index.css';\r\n\r\nclass Detail extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    render() {\r\n        return (\r\n            <Card>\r\n                <CardContent>\r\n                    {this.props.match.params.textID}\r\n                </CardContent>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Detail;","C:\\prj52\\ReactProject\\prj52\\src\\components\\Lottos.js",["64"],"import React from 'react';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Common from '../utills/Common';\r\nimport Ball from './Ball';\r\nimport '../index.css';\r\nimport './ball.css';\r\n\r\n\r\nconst getDataURL = \"http://localhost:8080/millionD/json\";\r\n// const headers = new Header({\r\n//     'Content-Type': 'application/json',\r\n//     'credentials': 'include',\r\n//     'Origin': 'localhost:3000',\r\n//     'method': 'POST'\r\n// })\r\nclass Lottos extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lottos : {},\r\n            totSellamnt: 0,\r\n            returnValue: '',\r\n            drwNoDate: '',\r\n            firstWinamnt: 0,\r\n            drwtNo6: 0,\r\n            drwtNo4: 0,\r\n            firstPrzwnerCo: 0,\r\n            drwtNo5: 0,\r\n            bnusNo: 0,\r\n            firstAccumamnt: 0,\r\n            drwNo: 0,\r\n            drwtNo2: 0,\r\n            drwtNo3: 0,\r\n            drwtNo1: 0\r\n        };\r\n        this.drwNo = 0\r\n    }\r\n\r\n    _getLottoData(drwNo, callback) {\r\n        fetch(`${getDataURL}?num=${drwNo}`).then(res => {\r\n            if(res.status !== 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(\r\n            lotto => {\r\n                // this.setState({lotto: (lotto == null) ?{}:lotto});\r\n                callback(lotto);\r\n            }\r\n        );\r\n    }\r\n\r\n    _getAllData() {\r\n        fetch(`${Common.databaseURL}/lottos.json`).then(res => {\r\n            if(res.status !== 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(lottos => {this.setState({lottos: (lottos == null) ? {} : lottos}); Common.lottos = lottos; console.log(\"get Lotto data by Lottos.js\")});\r\n    }\r\n\r\n    componentDidMount() {\r\n        if(typeof Common.lottos == \"undefined\" || Common.lottos == null) {\r\n            this._getAllData();\r\n        } else {\r\n            this.setState({lottos:Common.lottos});\r\n        }\r\n    }\r\n\r\n    _getData(drwNo) {\r\n        fetch(`${Common.databaseURL}/lottos/${drwNo}.json`).then(res => {\r\n            if(res.status !== 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(lotto => this.setState({lotto: (lotto == null) ?{}:lotto}));\r\n    }\r\n\r\n    _put(lotto, drwNo) {\r\n        return fetch(`${Common.databaseURL}/lottos/${drwNo}.json`,{\r\n            method:'put',\r\n            body:JSON.stringify(lotto)\r\n        }).then(res => {\r\n            if(res.status !== 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(data => {\r\n            if(this.drwNo > 1){\r\n                this.drwNo--;\r\n                this.updateLottoNum();\r\n                console.log(this.drwNo);\r\n            } else {\r\n                alert(\"end\");\r\n            }\r\n        });\r\n    }\r\n\r\n    _delete(id) {\r\n        return fetch(`${Common.databaseURL}/lottos/${id}.json`, {\r\n            method: 'DELETE'\r\n        }).then(res => {\r\n            if(res.status !== 200){\r\n                throw new Error(res.statusText);\r\n            }\r\n            return res.json();\r\n        }).then(() => {\r\n            let nextState = this.state.words;\r\n            delete nextState[id];\r\n            this.setState({words:nextState});\r\n        });\r\n    }\r\n\r\n    updateLottoNum = () => {\r\n        this._getLottoData(this.drwNo, (lotto)=>{\r\n            this._put(lotto, this.drwNo);\r\n        })\r\n    }\r\n\r\n    handleValueChange = (e) => {\r\n        this.drwNo = e.target.value;\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                {Object.keys(this.state.lottos).reverse().map(drwNo => {\r\n                    const lotto = this.state.lottos[drwNo];\r\n                    if(lotto != null) {\r\n                        return (\r\n                            <div key={drwNo}>\r\n                            <Card>\r\n                                <CardContent>\r\n                                    <Typography color=\"textSecondary\" gutterBottom>\r\n                                        {lotto.drwNo} 회차\r\n                                    </Typography>\r\n                                    <Grid container>\r\n                                        <Grid item xs={10}>\r\n                                            <Grid container>\r\n                                                <Grid item xs={2}>\r\n                                                    <Ball drwtNo={lotto.drwtNo1}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Ball drwtNo={lotto.drwtNo2}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Ball drwtNo={lotto.drwtNo3}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Ball drwtNo={lotto.drwtNo4}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Ball drwtNo={lotto.drwtNo5}/>\r\n                                                </Grid>\r\n                                                <Grid item xs={2}>\r\n                                                    <Ball drwtNo={lotto.drwtNo6}/>\r\n                                                </Grid>                                                \r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item xs={1}>\r\n                                            <Typography  variant=\"h5\" component=\"h2\">+</Typography>\r\n                                        </Grid>\r\n                                        <Grid item xs={1}>\r\n                                        <Ball drwtNo={lotto.bnusNo}/>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </CardContent>\r\n                            </Card>\r\n                            <br/>\r\n                            </div>\r\n                        );\r\n                    }\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lottos;","C:\\prj52\\ReactProject\\prj52\\src\\utills\\Common.js",[],"C:\\prj52\\ReactProject\\prj52\\src\\components\\Ball.js",[],["65","66"],"C:\\prj52\\ReactProject\\prj52\\src\\components\\CustomCard.js",[],{"ruleId":"67","severity":1,"message":"68","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":14},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":41,"column":27,"nodeType":"77","messageId":"78","endLine":41,"endColumn":29},{"ruleId":"75","severity":1,"message":"76","line":53,"column":27,"nodeType":"77","messageId":"78","endLine":53,"endColumn":29},{"ruleId":"75","severity":1,"message":"76","line":68,"column":27,"nodeType":"77","messageId":"78","endLine":68,"endColumn":29},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"71","replacedBy":"81"},{"ruleId":"73","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":7,"column":5,"nodeType":"85","messageId":"86","endLine":9,"endColumn":6},{"ruleId":"87","severity":1,"message":"88","line":131,"column":69,"nodeType":"89","messageId":"90","endLine":131,"endColumn":71},{"ruleId":"71","replacedBy":"91"},{"ruleId":"73","replacedBy":"92"},"no-unused-vars","'Common' is defined but never used.","Identifier","unusedVar","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["93"],["94"],["93"],["94"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["93"],["94"],"no-global-assign","no-unsafe-negation"]